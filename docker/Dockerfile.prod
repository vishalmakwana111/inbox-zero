# Stage 1: Build the application
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Install necessary tools (including git for husky prepare script, if needed)
RUN apk add --no-cache openssl git
RUN npm install -g pnpm

# Copy package manager files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml .npmrc* ./
# Copy package.json files for workspace projects
COPY apps/web/package.json apps/web/
COPY apps/unsubscriber/package.json apps/unsubscriber/
COPY apps/mcp-server/package.json apps/mcp-server/
COPY packages/eslint-config/package.json packages/eslint-config/
COPY packages/loops/package.json packages/loops/
COPY packages/resend/package.json packages/resend/
COPY packages/tinybird/package.json packages/tinybird/
COPY packages/tinybird-ai-analytics/package.json packages/tinybird-ai-analytics/
COPY packages/tsconfig/package.json packages/tsconfig/

# Install ALL dependencies (including devDeps needed for build)
RUN pnpm install --frozen-lockfile

# Copy the rest of the application code
COPY . .

# Set NODE_ENV to production for the build step
ENV NODE_ENV=production

# Build the specific application (inbox-zero-ai)
# Ensure prisma generate runs if needed by the build process
RUN pnpm --filter inbox-zero-ai exec -- prisma generate
RUN pnpm --filter inbox-zero-ai run build

# Prune development dependencies after build
RUN pnpm prune --prod

# ---

# Stage 2: Production image
FROM node:22-alpine AS runner

WORKDIR /app

# Set NODE_ENV to production for runtime
ENV NODE_ENV=production

# Install necessary tools (optional, only if runtime needs them)
RUN apk add --no-cache openssl

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files from the builder stage
# Copy production node_modules (pruned in builder stage)
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
# Copy built Next.js app
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next ./apps/web/.next
# Copy public assets
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public
# Copy package.json (needed by Next.js server)
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/package.json ./apps/web/package.json

# Switch to non-root user
USER nextjs

# Expose port 3000
EXPOSE 3000

# Set the default command to start the production server
# Change directory to the app's context before starting
CMD ["pnpm", "--filter", "inbox-zero-ai", "start"] 